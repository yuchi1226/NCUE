(1) In-memory indexing：這指的是在記憶體（RAM）中建立索引的方式。
                        當資料庫或系統需要快速存取和檢索資料時，將索引存放在記憶體中可以極大地提高效能。
                        因為記憶體的存取速度比硬碟快得多，所以當索引置於記憶體中時，資料的查詢速度會更快。

(2) In-disk indexing：這是將索引存放在硬碟或其他永久性儲存裝置中的方式。
                      這種方式的索引會佔用儲存空間，但當資料量龐大且無法完全放入記憶體時，這是一種常見的做法。
                      雖然在硬碟上的索引存取速度較慢，但透過儲存設備和檢索演算法的優化，仍然能夠有效地加速資料搜尋和存取過程。

(3) Caching：這是一種將資料暫時性地存放在快取記憶體中的技術。
             當系統需要某些資料時，它會先檢查快取（cache）中是否有這些資料的副本。
             如果有，系統就可以迅速地存取資料，而不必從較慢的原始資料來源（例如硬碟或網路）中讀取。
             這樣可以極大地提高系統的效能和回應速度，特別是對於重複存取的資料。

(4) Paging：這是一種虛擬記憶體管理的技術，用於操作系統中。
            當系統中的程式需要更多記憶體空間時，但實體記憶體有限，
            操作系統會將暫時不需要的資料移至硬碟上的某個區域（稱為頁面檔案），
            從而釋放實體記憶體空間給新的程式或資料。當原本被移至硬碟的資料再次需要時，
            操作系統會將其從硬碟調回實體記憶體。這個過程是透明的，對於使用者和程式來說，好像所有需要的資料都在記憶體中一樣。

(5) Batched I/O：這是一種優化資料存取的方法，它將多個I/O（Input/Output）操作合併成一個批次進行。
                 通常情況下，單獨的I/O操作可能會造成額外的開銷，例如系統調用或資料傳輸的開銷。
                 當進行批次I/O時，系統可以將多個小型I/O請求合併為一個大型的請求，從而減少了這些額外的開銷，提高了資料存取的效率。

(6) Multithreading and thread scheduling：
        多線程和線程排程是指在計算機科學中利用多個執行緒（threads）同時運行程式的概念。
        每個執行緒可以視為程式中獨立的執行流程，多線程允許程式同時執行多項任務。
        線程排程是指系統如何管理和安排這些執行緒以確保資源的有效利用和執行效率。
        這包括決定哪個執行緒應該優先執行、如何分配CPU時間給不同的執行緒等。

(7) Shared memory and consistency：
        共享記憶體是指多個處理單元（例如不同的程式或執行緒）可以存取相同的記憶體區域。
        當多個處理單元同時存取共享記憶體時，需要確保資料的一致性（consistency）。
        這意味著對共享資料的讀取和寫入應該按照特定的規則和順序進行，以避免競爭條件（race conditions）和資料不一致的問題。
        各種同步機制和鎖（locks）通常用於確保共享資料的一致性。

(8) Encoding/Decoding：
        編碼（Encoding）和解碼（Decoding）是將資料從一種形式轉換成另一種形式的過程。
        在資訊科學中，這通常指的是將資料從一種格式轉換成另一種格式，例如將文字轉換成二進位制以進行儲存或傳輸，或者將壓縮的資料解壓縮回原始格式。
        編碼是將資料轉換成另一種表示形式，
        解碼則是將這種表示形式轉換回原始的資料形式。

(9) File system block layout：檔案系統的區塊佈局是指檔案系統如何將儲存在儲存裝置（例如硬碟或固態硬碟）中的資料進行組織和管理。
                              這包括決定如何將儲存空間分成區塊（blocks）、如何分配這些區塊給不同的檔案或資料，以及如何索引這些區塊以便快速存取。
                              區塊的大小、排列方式和索引結構等因素都是區塊佈局中考慮的重點，直接影響著檔案系統的效能和容量利用率。

(10) File system compaction：檔案系統壓縮是指重新組織儲存裝置上的資料，以減少碎片化和提高效能的過程。
                             當檔案系統中的檔案被創建、修改和刪除時，儲存裝置上的空間可能會出現碎片化，即空間被分成多個不連續的區塊。
                             這可能導致效能下降，因為系統需要更多時間來存取分散的資料。
                             壓縮會重新組織這些分散的資料，使其更加連續和有效地使用儲存空間，從而提高存取效能。