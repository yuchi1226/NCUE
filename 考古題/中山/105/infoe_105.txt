資料結構
{
    1.
    (a) 優先級反轉發生在多任務或多線程系統中，當一個具有較高優先級的任務因為一個較低優先級的任務而間接延遲時。
        解決這個問題的常見方法之一是優先級繼承。
        當一個較低優先級的任務持有一個高優先級任務所需的共享資源時，低優先級的任務暫時繼承高優先級任務的優先級，確保持有資源的任務獲得較高的優先權，讓高優先級的任務能夠及時訪問資源。
    (b) 通過確保系統永遠不進入不安全的狀態來防止系統進入死鎖狀態。其中一種方法是銀行家算法：
        系統追蹤可用資源和每個進程可能需要完成其執行的最大資源。
        在分配資源給一個進程之前，系統檢查是否分配會使系統處於安全狀態（即存在一個完成所有進程而不死鎖的順序）。
        如果分配資源給一個進程會導致不安全狀態，系統會等待直到安全或拒絕分配請求。
    (c) Mutual Exclusion、Progress、Bounded Waiting

    2.
    (1) 掛載點是指在一個文件系統中，用來連接儲存設備或另一個文件系統的目錄。
        當你在電腦上掛載一個儲存設備（例如硬碟、USB 隨身碟）時，這個儲存設備的根目錄就被附加到文件系統中的某個目錄上，這個目錄就是掛載點。
        掛載點的作用是讓操作系統能夠訪問和管理這些外部儲存設備或文件系統。

    (2) 多級命名指的是將名稱階層化，以便更清晰地組織和定位文件、目錄或資源。它的優勢包括：
        組織性： 可以根據功能、類別或其他標準將文件和資源進行分類和組織，使其更易於管理和尋找。
        層次性： 透過層次結構，能更清晰地表達物件之間的關係，提供更直觀的命名方式。
        唯一性： 在不同層次中使用不同的名稱，確保在整個系統中名稱的唯一性，避免衝突和混淆。

    (3) 磁盤隨機存取時間的兩個部分是什麼？
        尋找時間（Seek Time）： 是磁頭移動到所需資料軌道的時間。當CPU需要訪問磁盤的某個區域時，磁頭需要移動到該區域所在的磁道，這個移動時間即是尋找時間。
        旋轉延遲（Rotational Latency）： 是等待所需資料旋轉到磁頭下方的時間。因為磁盤在旋轉中，所需資料可能不在磁頭正下方，需要等待磁盤旋轉，直到所需資料位於磁頭下方。
        這兩個時間的總和即為磁盤隨機存取時間。

    (4) 關於CPU的兩個中斷請求線是什麼？
        非可屏蔽中断（Non-Maskable Interrupt, NMI）：非可屏蔽中断是一種重要且無法被屏蔽或阻止的中斷信號。這類中斷通常指示一些嚴重的系統問題，如硬件錯誤、記憶體錯誤或其他重要的系統異常。因為這些中斷通常表示系統需要立即處理的緊急情況，CPU無法阻止或忽略它們。NMI通常會引起CPU立即中止正在執行的程序並轉向處理這些緊急事件。
        可屏蔽中断（Maskable Interrupt）：可屏蔽中断是一種可以由CPU屏蔽或禁用的中斷信號。這些中斷通常可以由系統軟體或CPU的中斷控制器進行控制，可以根據需要屏蔽或啟用。舉例來說，一些外部設備的中斷（如鍵盤、滑鼠）可以是可屏蔽中斷，系統可以通過控制中斷掩碼來決定是否接受或處理這些中斷。
    3.
    (1) 關於記憶體動態分配問題，有哪三種常見的解決方案？
        分割與重整（Partitioning and Compaction）： 將記憶體分為多個固定大小或不同大小的區域，當一個程序需要記憶體時，分配一個合適大小的區域。當有些區域被釋放後，可能會造成內存碎片化。為了解決內存碎片化問題，可以進行內存重整，將多個小的未使用區域合併成一個大的可用區域。
        動態分配（Dynamic Allocation）： 使用動態分配算法，例如首適適應（First Fit）、最佳適應（Best Fit）、最差適應（Worst Fit），根據程序所需的大小，尋找合適的可用區域進行分配。這種方法可以減少內存碎片，但可能會有分配效率問題。
        鏈接分配（Linked Allocation）： 將內存分成大小相等的區塊，當一個程序需要內存時，動態地分配這些區塊，並將它們連接成一個鏈表。這樣的方法可以更靈活地分配內存，但可能會增加內存開銷。

    (2) MMU（Memory Management Unit）和 TLB（Translation Lookaside Buffer）各自的用途是什麼？
        MMU（記憶體管理單元）： 負責處理虛擬記憶體地址到實際物理記憶體地址的映射和轉換。它可以實現虛擬記憶體的分段、分頁，以及虛擬記憶體和實際物理記憶體之間的映射關係。
        TLB（轉譯高速緩衝器）： 是一個高速緩存，存儲了虛擬地址到實際物理地址的映射表的部分內容。TLB的目的是加速記憶體地址的轉譯過程，當CPU需要將虛擬地址轉換為物理地址時，TLB能夠快速提供映射關係，減少對記憶體的訪問時間。

    (3) 證明堆疊（Stack）算法永遠不會遇到 Belady 的異常。
        Belady 的異常是指在某些情況下，增加緩衝區大小可能導致更多的缺頁中斷。對於堆疊算法來說，它的特點是遵循後進先出（LIFO）原則，每次需要替換頁面時，選擇最近最少使用的頁面替換出去。
        由於堆疊算法按照後進先出的原則進行頁面替換，當增加緩衝區大小時，新進入的頁面會緊緊堆疊在最上面，而不會在短時間內被淘汰。這樣的特性使得堆疊算法不會出現 Belady 的異常，因為堆疊算法的決策只跟頁面的位置有關，不受緩衝區大小的影響。

    (4) 伙伴系統（Buddy System）如何分配內核記憶體？
        伙伴系統是一種用於管理內核（Kernel）內存的技術。當內核需要分配一個指定大小的記憶體區塊時，伙伴系統將會尋找最接近且大於該大小的2的冪次方大小的區塊，然後將這個區塊進行劃分，一半分配給內核使用，而另一半則被保留用作其他分配需求。這個過程會持續進行，形成一個記憶體區塊的伙伴系統。
        當某個區塊被釋放時，伙伴系統會檢查其相鄰的區塊是否也被釋放，若是，則會合併這兩個區塊，形成一個更大的記憶體區塊，並將其納入伙伴系統中以供未來分配使用。伙伴系統的效率高，並且減少了外部碎片的產生。
    
    4.
    (1) 請給出三種實現保護域（Protection Domain）的方法，並解釋每種方法何時會進行域切換。
        硬體支援（Hardware Support）： 這種方法依賴於硬體提供的機制來實現保護域。例如，某些處理器可能具有特殊的權限位或模式，當程式執行需要更高權限的指令或訪問受限資源時，CPU會執行特定的切換指令以進行域切換。
        軟體實現（Software Implementation）： 在這種情況下，保護域是由操作系統或系統軟體管理的。當程式執行需要切換到不同保護域時，系統軟體會檢查程式的權限和要求，並進行相應的切換。
        虛擬化（Virtualization）： 使用虛擬化技術時，每個虛擬機器或環境都可視為一個獨立的保護域。當虛擬機器需要訪問不同的資源或運行不同的作業系統時，虛擬化軟體會進行域切換。

    (2) 請列舉使用基於語言的保護（Language-based Protection）的優勢。
        1.細粒度控制：語言結構允許精確指定對個別物件、函數和資料類型的存取許可權，比傳統的作業系統層級機制具有更細粒度的保護。
        2.型別安全性：強型別系統強制執行資料使用規則，防止未經授權的操作，並降低緩衝區溢出、型別混淆攻擊等常見漏洞的風險。
        3.靜態分析：程式碼可以在執行之前進行分析，以檢測潛在的安全漏洞並在開發過程的早期強制執行保護策略。

    (3) 電腦病毒（Computer Virus）和電腦蠕蟲（Computer Worm）之間的區別是什麼？
        電腦病毒： 病毒是一種程式碼，可以植入到其他程式中，當這些程式被執行時，病毒也會被執行並開始複製自身，傳播到其他程式和系統。病毒需要另一個程式或系統來傳播和感染。
        電腦蠕蟲： 蠕蟲是一種獨立的程式，可以自行在系統間傳播，無需依賴其他程式。蠕蟲通常利用系統或網絡的漏洞來自行複製和傳播，可以在不需要人工干預的情況下感染多台系統。

    (4) 在非對稱加密中，如何實現金鑰分發？
        非對稱加密使用公鑰和私鑰。金鑰分發可以透過以下方式實現：
        加密的方式分發： 使用安全通道（如HTTPS）將公鑰安全地傳送給對方。然後，對方使用你的公鑰加密訊息，只有你的私鑰可以解密。
        數字證書： 通過數字證書機構（Certificate Authority，CA）獲得數字證書，證書包含公鑰和相關資訊，由CA簽名證明其有效性。

    (5) 簽名基於檢測和異常檢測之間的區別是什麼？
        簽名基於檢測（Signature-Based Detection）： 這種方法使用已知病毒或攻擊的特徵（例如病毒的簽名）來檢測是否存在惡意軟體。它需要不斷更新病毒庫以保持有效性。
        異常檢測（Anomaly Detection）： 這種方法通過監控系統的正常行為模式，識別出與正常行為不一致的活動。它可以檢測到新型攻擊或病毒，但也可能產生誤報。

    6.
    (1) 二元搜尋樹的主要性質是什麼？
        二元搜尋樹的主要性質是：
        任一節點的值大於或等於其左子樹所有節點的值。
        任一節點的值小於或等於其右子樹所有節點的值。
        這個性質保證了二元搜尋樹的搜尋、插入和刪除操作具有平均時間複雜度為 O(log n) 的效率。
    
    (3) 快速排序的最佳情況發生在分割算法每次都將陣列分成兩個相等的子陣列時。在這種情況下，每個遞歸調用都處理大小為原始陣列一半的子陣列，從而導致平衡的二分法方法。
        最佳情況時間複雜度的遞歸關係可以表示為 T(n) = 2T(n/2) + O(n)，其中 T(n) 表示對大小為 n 的陣列進行排序的時間。
        使用遞歸關係的 Master 定理，我們可以解決此問題以得到 T(n) = O(n log n)。
        因此，快速排序的最佳情況複雜度是 O(n log n)。

    7.
    (1) 樹的兩個主要特性是：
        階層結構：樹是一種階層式的資料結構，由節點通過邊相連，每個節點都可能有零個或多個子節點。
        非循環結構：樹不包含任何循環，任意兩個節點之間只有一條路徑。

    (3) B+ 樹：
            節點存儲鍵和指向子節點的指針（而不是整個記錄）。
            葉子節點形成一個鏈接列表，使範圍查詢效率高。
            用於資料庫系統中的索引和資料獲取。
        B 樹：*
            類似於 B+ 樹，但旨在更均勻地分佈節點。
            要求至少有 2/3 滿節點（而不是 1/2）。
            採用在節點不足時重新分配鍵的策略。
        2-3-4 樹：
            B 樹的特殊情況，分支因子為 2-4。
            每個節點可以有 2、3 或 4 個子節點。
            保持自平衡的特性，以便高效運行。
            經常用作其他樹實現的基礎結構。






}

計算機
{
    3.https://www.ptt.cc/bbs/Grad-ProbAsk/M.1517469951.A.A67.html

}