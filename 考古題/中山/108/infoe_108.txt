資料結構
{
    1.
    (1) 18 + 17 * 16 + (15 * 14 + 13) * 12
        2966

    (2) 簡單均勻哈希：
        簡單均勻哈希指的是一種方法，其中每個元素被哈希到哈希表的任何槽位的概率是相等的，且與其他元素獨立無關。
        這種方法假設每個鍵被哈希到哈希表的任何槽位的概率是相等的。

        對於一個具有 'm' 個槽位並存儲 'n' 個元素的哈希表，使用鏈式解決哈希碰撞（在每個槽位使用鏈表來處理碰撞），一次失敗搜索所需的預期時間涉及計算平均所需的比較次數。

        對於哈希表中的鏈式解決方法：
        表中列表的平均長度為 n/m。
        失敗搜索所需的預期時間與哈希槽位上鏈表的長度成正比，該槽位是如果元素存在則應該位於的位置。
        因此，在具有鏈式解決碰撞的簡單均勻哈希中，失敗搜索所需的預期時間為 O(n/m)，這意味著它與鏈中的平均元素數成正比。


    (3) 紅黑樹的特性（除了二叉搜索樹的特性）:
        1.每個節點都是紅色或黑色。
        2.根是黑色的。
        3.所有葉子（NIL 節點）都是黑色的。
        4.如果一個節點是紅色的，那麼它的兩個子節點都是黑色的。
        5.從一個節點到其後代葉子的每條路徑都具有相同數量的黑色節點。
        轉換步驟:
        1.將所有節點都染成紅色。
        2.從樹的底部開始，逐漸向上，根據需要執行樹旋轉和顏色更改以強制執行紅黑屬性。
        3.在插入和刪除期間使用特定的程序，如“重新著色”和“重新平衡”，以保持這些屬性。

    (4) nlogn、n^2、n^2、nlogn

    (5) BFS: ABCDFES
        DFS: ABCDEFS

    2.
    (1) 如果一個圖的每一個頂點都可從該圖其他任意一點到達，則稱該圖是強連通的。
        在任意有向圖中能夠實現強連通的部分我們稱其為強連通元件。
        判斷一個圖是否為強連通以及找到一個圖強連通元件只需要線性時間（Θ(V + E)）

    (2) B 樹對於磁碟存儲很有優勢，因為它的結構允許每個節點包含更多的鍵值。
        這降低了樹的高度，意味著要定位特定數據所需的訪問層級更少。
        因為每個層級通常需要進行單獨的磁盤讀取，B 樹比其他樹結構有更寬的分支因子，從而減少了需要的磁盤 I/O 操作數量。 

    (3)

    (4) 二項堆的兩個屬性
        1.結構：二項堆是一個二項樹的集合，每個二項樹具有唯一的度數，並遵循二項堆的屬性：度為 k 的二項樹的根具有度為 k-1 的子節點，對於 0 <= k <= n。
        2.操作：二項堆支持高效的插入、合并和查找最小元素操作，時間複雜度為 O(log n)。
        3.關鍵屬性
            結構屬性：強制二項堆內的二項樹具有特定的結構。
            堆屬性：確保父節點的鍵始終小於或等於其子節點的鍵，保持堆的順序。

}

計算機
{
    1. 
    (1) 0/0000 0000/000 0000 0000 0000 0000 0000

    (2) 1/0111 1110/000 0000 0000 0000 0000 0000

    (3) 1.111 1111 1111 1111 1111 1111 * 2^127

    (4) 1.000 0000 0000 0000 0000 0000 * 2^-126

    (5) 0.000 0000 0000 0000 0000 0001 * 2^-126

    (6) +-0、+-∞、NaN
        +-(1.111 1111 1111 1111 1111 1111*2^127 ~ 1.000 0000 0000 0000 0000 0000*2^-126)
        +-(0.111 1111 1111 1111 1111 1111*2^-126 ~ 0.000 0000 0000 0000 0000 0001*2^-126)
    
    (7) NO
        例如說:
        0 00000001 00000000000000000000000 和 0 00000001 00000000000000000000001 的距離是 0.00000000000000000000001*2^-126
        0 11111110 00000000000000000000000 和 0 11111110 00000000000000000000001 的距離是 0.00000000000000000000001*2^127
    
    (8) Yes，相鄰兩數的距離同為2^-16
    
    (9) 最大正整數0111 1111 1111 1111.1111 1111 1111 1111 = ((2^15)-1)+(1-(2^-16)) = 32768
        最大負整數1000 0000 0000 0000.0000 0000 0000 0000 = -2^15 = 32768
    
    (10) step1 exponent ailgment
         step2 significant add/sub
         step3 normalization
         step4 rounding
         每一步都需要至少一clock cycle

    2.
    (1) 1.5625
    (2) 0.25%
    (3) 3.64
    (4) 1.23
    
    3.
    (1) 20MHz

    (2) total latency = 5200ns
        throughput = 100/5200=20*10^6 instruction/sec
        average CPI = 1.04
        
    (3) 
    
    (4) 資料危障:當計畫的指令無法在正確的時鐘週期執行，因為指令所需的資料尚不可用
        如果不進行干預，資料危障可能會嚴重阻礙管道

    (5) 超級管道是將給定管道的階段分解成更小的階段，從而使管道更深，進而提高產量
        優點:
            1.減少週期時間，提高產量
            2.增加ILP(Instruction-level parallelism)
            3.提高加速比
        缺點:
            1.增加管道危險的處罰
            2.增加stage-latency的平衡難度
            3.增加管道的實現複雜度

    4.
    (1) 147K
    (2) 148K
    (3) 157K
    (4) 
    (5) 2ns 
    (6) 2.72
    (7) 5.4
    (8) 6.6

    5.
    (1) 單指令多資料（SIMD）的優勢在於能夠使用單一指令同時處理多個資料元素，這可以大幅提升效能。
        在傳統 CPU 中，SIMD 的多個運算單元由同一控制單元驅動，使得所有資料可以平行執行同一指令，這稱為單指令多資料（SIMD）。
        在 GPU 中，SIMD 則是以每個串流多處理器（SM）為基礎運作。它對資料串流執行一個通用指令，導致所有執行緒同時執行相同的指令，這被稱為單指令多執行緒（SIMT）。

    (2) 控制風險：當正確的指令無法在正確的流水線時鐘周期內執行，是因為提取的指令不是所需的指令。
        分支預測可用於改善性能下降。也就是說，通過預測分支是否發生，可以繼續在流水線中執行分支指令。
        如果預測錯誤，正在提取和解碼的指令將被丟棄（刷新）。

    (3) 時間局部性：如果引用了一個項目，它很可能很快再次被引用。
        空間局部性：如果引用了一個項目，其地址附近的項目很可能很快被引用。
        在循環中提取指令或資料利用了時間局部性，
        順序訪問數組中的資料項目展示了空間局部性。

    (4) 靜態多發：一種實現多發處理器的方法，許多決策在執行之前由編譯器做出。
        動態多發：一種實現多發處理器的方法，在執行期間由處理器做出許多決策。
    
}

數學
{
    
}