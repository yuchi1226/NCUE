1.
{
    (1)14
    (2)34
    (3)4
    (4)true
    (5)false
}
2.
{
    double median(double x, double y, double z) {
        double result;

        if (x <= y) 
            if (y <= z) 
                result = y;
            else if (x <= z) 
                result = z;
            else 
                result = x;
        else 
            if (z < y) 
                result = y;
            else if (x <= z) 
                result = x;
            else 
                result = z;
        
        return result;
    }
}
3.
{
    (1) (0, 1, 3, 0, 2, 3, 5)

    (2) (0, 1, 2, 3, 0, 3, 5)

    (3) 从右到左找到第一个非递增的数字，记为B[i]。
        在B[i:]中找到比B[i]大且最小的数字，记为B[j]。
        交换B[i]和B[j]。
        将B[i+1:]反转。

    (4) 从右到左找到第一个非递减的数字，记为B[i]。
        在B[i:]中找到比B[i]小且最大的数字，记为B[j]。
        交换B[i]和B[j]。
        将B[i+1:]反转。
}
4.
{
    (1) O(n^2)                          (2) O(n^2)
    (3) O(n^2)                          (4) O(n^2)
    (5) O(n^2)                          (6) O(n^2)
    (7) O(n^2) (當樹高不平衡時)          (8) O(nlogn) (在平衡樹的情況下)
    (9) O(nlogn)                       (10) O(nlogn)
    (11) O(n^2) (在不平衡分割的情況下)   (12) O(nlogn)
    (13) O(nlogn)                      (14) O(nlogn)
}
5.
{
    (a) iii. System software.
    (b) iii. Enables the associated controller to read and write data directly from/to primary memory with no CPU intervention during data transfer.
    (c) ii. Operating system for the user program.
    (d) iii. The process's state will be changed from running to ready.
    (e) i. Mutual exclusion to the critical section is guaranteed.
}
6.
{
    (a) i、vi

    (b) i. Only one process can be running inside the monitor at any time.
        vi
        
    (c) i. System calls are functions defined as part of the operating systems.
        iii. System calls are implemented using a trap instruction which generates an interrupt.
        vi

    (d) i. Process management.
        ii. Device management.
        iii. Memory management.
        iv
        
    (e) ii. The CPU is informed through an interrupt request line when the current I/O operation is done.
        iv. A device status table is necessary to save information about pending I/O requests.
}
7.
{
    Pretty Good Privacy（PGP）：
    PGP是一個數據加密和解密程序，提供加密隱私和身份驗證。它使用了對稱和非對稱密鑰加密的組合。

    1. 消息保密性：
    - **對稱加密：** PGP為每個消息生成一個隨機的對稱密鑰（會話密鑰）。
    - **加密消息：** 使用對稱加密（如AES）使用會話密鑰來加密實際消息。
    - **會話密鑰加密：** 會話密鑰本身使用接收者的公鑰（非對稱加密）進行加密。這確保只有持有相應私鑰的預期接收者能解密會話密鑰。

    2. 發件人身份驗證：
    - PGP利用數字簽名進行發件人身份驗證。
    - 發件人使用哈希函數（如SHA-256）計算消息的哈希值。
    - 使用發件人的私鑰將此哈希值加密以生成數字簽名。
    - 接收者使用發件人的公鑰解密簽名以驗證消息的完整性和發件人的身份。

    3. 消息完整性：
    - 通過使用發件人的私鑰對消息的哈希值進行簽名，PGP確保了消息的完整性。
    - 對消息進行任何更改都將導致不同的哈希值，並且簽名驗證將失敗。
}
8.
{
    Cipher Block Chaining（CBC）：
    CBC是用於像AES這樣的分塊加密的操作模式。它將反饋元素引入加密過程中，使每個塊的加密取決於所有先前的塊。

    1. 塊鏈接：
    - 對每個明文塊進行XOR運算，使用前一個密文塊進行加密前的XOR操作。
    - 這個XOR操作增加了隨機性，防止相同的明文塊產生相同的密文塊。

    2. 初始化向量（IV）：
    - CBC需要一個初始化向量，它是與密碼相同大小的隨機值。
    - 在加密之前，初始化向量與第一個明文塊進行XOR運算。

    3. 依賴於先前的塊：
    - 每個密文塊都依賴於所有先前的塊，增加了複雜性並提高了安全性。

    4. 並行化挑戰：
    - 其中一個缺點是，每個塊的加密都依賴於前一個塊，限制了硬件的並行化。

    CBC廣泛用於其安全性的好處，但需要仔細處理初始化向量和鏈接過程，以避免漏洞，如初始化向量重用或填充oracle攻擊。
}